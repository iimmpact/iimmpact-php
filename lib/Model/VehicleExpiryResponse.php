<?php
/**
 * VehicleExpiryResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  iimmpact
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IIMMPACT API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iimmpact\Model;

use \ArrayAccess;
use \iimmpact\ObjectSerializer;

/**
 * VehicleExpiryResponse Class Doc Comment
 *
 * @category Class
 * @package  iimmpact
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VehicleExpiryResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VehicleExpiryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vehicle_plate_number' => 'string',
        'date_of_commencement' => 'string',
        'expiry_date' => 'string',
        'insurance_expiry_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vehicle_plate_number' => null,
        'date_of_commencement' => null,
        'expiry_date' => null,
        'insurance_expiry_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vehicle_plate_number' => 'Vehicle Plate Number',
        'date_of_commencement' => 'Date of Commencement',
        'expiry_date' => 'Expiry Date',
        'insurance_expiry_date' => 'Insurance Expiry Date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vehicle_plate_number' => 'setVehiclePlateNumber',
        'date_of_commencement' => 'setDateOfCommencement',
        'expiry_date' => 'setExpiryDate',
        'insurance_expiry_date' => 'setInsuranceExpiryDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vehicle_plate_number' => 'getVehiclePlateNumber',
        'date_of_commencement' => 'getDateOfCommencement',
        'expiry_date' => 'getExpiryDate',
        'insurance_expiry_date' => 'getInsuranceExpiryDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vehicle_plate_number'] = isset($data['vehicle_plate_number']) ? $data['vehicle_plate_number'] : null;
        $this->container['date_of_commencement'] = isset($data['date_of_commencement']) ? $data['date_of_commencement'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['insurance_expiry_date'] = isset($data['insurance_expiry_date']) ? $data['insurance_expiry_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vehicle_plate_number
     *
     * @return string
     */
    public function getVehiclePlateNumber()
    {
        return $this->container['vehicle_plate_number'];
    }

    /**
     * Sets vehicle_plate_number
     *
     * @param string $vehicle_plate_number vehicle_plate_number
     *
     * @return $this
     */
    public function setVehiclePlateNumber($vehicle_plate_number)
    {
        $this->container['vehicle_plate_number'] = $vehicle_plate_number;

        return $this;
    }

    /**
     * Gets date_of_commencement
     *
     * @return string
     */
    public function getDateOfCommencement()
    {
        return $this->container['date_of_commencement'];
    }

    /**
     * Sets date_of_commencement
     *
     * @param string $date_of_commencement date_of_commencement
     *
     * @return $this
     */
    public function setDateOfCommencement($date_of_commencement)
    {
        $this->container['date_of_commencement'] = $date_of_commencement;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return string
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param string $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets insurance_expiry_date
     *
     * @return string
     */
    public function getInsuranceExpiryDate()
    {
        return $this->container['insurance_expiry_date'];
    }

    /**
     * Sets insurance_expiry_date
     *
     * @param string $insurance_expiry_date insurance_expiry_date
     *
     * @return $this
     */
    public function setInsuranceExpiryDate($insurance_expiry_date)
    {
        $this->container['insurance_expiry_date'] = $insurance_expiry_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


