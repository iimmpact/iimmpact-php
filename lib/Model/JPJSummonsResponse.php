<?php
/**
 * JPJSummonsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  iimmpact
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IIMMPACT API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iimmpact\Model;

use \ArrayAccess;
use \iimmpact\ObjectSerializer;

/**
 * JPJSummonsResponse Class Doc Comment
 *
 * @category Class
 * @package  iimmpact
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JPJSummonsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JPJSummonsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'summon_notice_no_' => 'string',
        'notice_type' => 'string',
        'vehicle_registration_no_' => 'string',
        'date__time_of_offenses' => 'string',
        'notice_compound_payment_date' => 'string',
        'offenses_type' => 'string',
        'offenses_location' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'summon_notice_no_' => null,
        'notice_type' => null,
        'vehicle_registration_no_' => null,
        'date__time_of_offenses' => null,
        'notice_compound_payment_date' => null,
        'offenses_type' => null,
        'offenses_location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'summon_notice_no_' => 'Summon Notice No.',
        'notice_type' => 'Notice Type',
        'vehicle_registration_no_' => 'Vehicle Registration No.',
        'date__time_of_offenses' => 'Date &amp; Time of Offenses',
        'notice_compound_payment_date' => 'Notice Compound Payment Date',
        'offenses_type' => 'Offenses Type',
        'offenses_location' => 'Offenses Location'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'summon_notice_no_' => 'setSummonNoticeNo_',
        'notice_type' => 'setNoticeType',
        'vehicle_registration_no_' => 'setVehicleRegistrationNo_',
        'date__time_of_offenses' => 'setDateTimeOfOffenses',
        'notice_compound_payment_date' => 'setNoticeCompoundPaymentDate',
        'offenses_type' => 'setOffensesType',
        'offenses_location' => 'setOffensesLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'summon_notice_no_' => 'getSummonNoticeNo_',
        'notice_type' => 'getNoticeType',
        'vehicle_registration_no_' => 'getVehicleRegistrationNo_',
        'date__time_of_offenses' => 'getDateTimeOfOffenses',
        'notice_compound_payment_date' => 'getNoticeCompoundPaymentDate',
        'offenses_type' => 'getOffensesType',
        'offenses_location' => 'getOffensesLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['summon_notice_no_'] = isset($data['summon_notice_no_']) ? $data['summon_notice_no_'] : null;
        $this->container['notice_type'] = isset($data['notice_type']) ? $data['notice_type'] : null;
        $this->container['vehicle_registration_no_'] = isset($data['vehicle_registration_no_']) ? $data['vehicle_registration_no_'] : null;
        $this->container['date__time_of_offenses'] = isset($data['date__time_of_offenses']) ? $data['date__time_of_offenses'] : null;
        $this->container['notice_compound_payment_date'] = isset($data['notice_compound_payment_date']) ? $data['notice_compound_payment_date'] : null;
        $this->container['offenses_type'] = isset($data['offenses_type']) ? $data['offenses_type'] : null;
        $this->container['offenses_location'] = isset($data['offenses_location']) ? $data['offenses_location'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets summon_notice_no_
     *
     * @return string
     */
    public function getSummonNoticeNo_()
    {
        return $this->container['summon_notice_no_'];
    }

    /**
     * Sets summon_notice_no_
     *
     * @param string $summon_notice_no_ summon_notice_no_
     *
     * @return $this
     */
    public function setSummonNoticeNo_($summon_notice_no_)
    {
        $this->container['summon_notice_no_'] = $summon_notice_no_;

        return $this;
    }

    /**
     * Gets notice_type
     *
     * @return string
     */
    public function getNoticeType()
    {
        return $this->container['notice_type'];
    }

    /**
     * Sets notice_type
     *
     * @param string $notice_type notice_type
     *
     * @return $this
     */
    public function setNoticeType($notice_type)
    {
        $this->container['notice_type'] = $notice_type;

        return $this;
    }

    /**
     * Gets vehicle_registration_no_
     *
     * @return string
     */
    public function getVehicleRegistrationNo_()
    {
        return $this->container['vehicle_registration_no_'];
    }

    /**
     * Sets vehicle_registration_no_
     *
     * @param string $vehicle_registration_no_ vehicle_registration_no_
     *
     * @return $this
     */
    public function setVehicleRegistrationNo_($vehicle_registration_no_)
    {
        $this->container['vehicle_registration_no_'] = $vehicle_registration_no_;

        return $this;
    }

    /**
     * Gets date__time_of_offenses
     *
     * @return string
     */
    public function getDateTimeOfOffenses()
    {
        return $this->container['date__time_of_offenses'];
    }

    /**
     * Sets date__time_of_offenses
     *
     * @param string $date__time_of_offenses date__time_of_offenses
     *
     * @return $this
     */
    public function setDateTimeOfOffenses($date__time_of_offenses)
    {
        $this->container['date__time_of_offenses'] = $date__time_of_offenses;

        return $this;
    }

    /**
     * Gets notice_compound_payment_date
     *
     * @return string
     */
    public function getNoticeCompoundPaymentDate()
    {
        return $this->container['notice_compound_payment_date'];
    }

    /**
     * Sets notice_compound_payment_date
     *
     * @param string $notice_compound_payment_date notice_compound_payment_date
     *
     * @return $this
     */
    public function setNoticeCompoundPaymentDate($notice_compound_payment_date)
    {
        $this->container['notice_compound_payment_date'] = $notice_compound_payment_date;

        return $this;
    }

    /**
     * Gets offenses_type
     *
     * @return string
     */
    public function getOffensesType()
    {
        return $this->container['offenses_type'];
    }

    /**
     * Sets offenses_type
     *
     * @param string $offenses_type offenses_type
     *
     * @return $this
     */
    public function setOffensesType($offenses_type)
    {
        $this->container['offenses_type'] = $offenses_type;

        return $this;
    }

    /**
     * Gets offenses_location
     *
     * @return string
     */
    public function getOffensesLocation()
    {
        return $this->container['offenses_location'];
    }

    /**
     * Sets offenses_location
     *
     * @param string $offenses_location offenses_location
     *
     * @return $this
     */
    public function setOffensesLocation($offenses_location)
    {
        $this->container['offenses_location'] = $offenses_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


