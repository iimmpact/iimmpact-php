<?php
/**
 * DrivingTestResponeEnquiryTestPart1
 *
 * PHP version 5
 *
 * @category Class
 * @package  iimmpact
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IIMMPACT API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iimmpact\Model;

use \ArrayAccess;
use \iimmpact\ObjectSerializer;

/**
 * DrivingTestResponeEnquiryTestPart1 Class Doc Comment
 *
 * @category Class
 * @package  iimmpact
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DrivingTestResponeEnquiryTestPart1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DrivingTestRespone_Enquiry Test Part 1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_of_test' => 'string',
        'test_type' => 'float',
        'license_class' => 'float',
        'test_venue' => 'string',
        'result' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_of_test' => null,
        'test_type' => null,
        'license_class' => null,
        'test_venue' => null,
        'result' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_of_test' => 'Date of Test',
        'test_type' => 'Test Type',
        'license_class' => 'License Class',
        'test_venue' => 'Test Venue',
        'result' => 'Result'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_of_test' => 'setDateOfTest',
        'test_type' => 'setTestType',
        'license_class' => 'setLicenseClass',
        'test_venue' => 'setTestVenue',
        'result' => 'setResult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_of_test' => 'getDateOfTest',
        'test_type' => 'getTestType',
        'license_class' => 'getLicenseClass',
        'test_venue' => 'getTestVenue',
        'result' => 'getResult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_of_test'] = isset($data['date_of_test']) ? $data['date_of_test'] : null;
        $this->container['test_type'] = isset($data['test_type']) ? $data['test_type'] : null;
        $this->container['license_class'] = isset($data['license_class']) ? $data['license_class'] : null;
        $this->container['test_venue'] = isset($data['test_venue']) ? $data['test_venue'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_of_test
     *
     * @return string
     */
    public function getDateOfTest()
    {
        return $this->container['date_of_test'];
    }

    /**
     * Sets date_of_test
     *
     * @param string $date_of_test date_of_test
     *
     * @return $this
     */
    public function setDateOfTest($date_of_test)
    {
        $this->container['date_of_test'] = $date_of_test;

        return $this;
    }

    /**
     * Gets test_type
     *
     * @return float
     */
    public function getTestType()
    {
        return $this->container['test_type'];
    }

    /**
     * Sets test_type
     *
     * @param float $test_type test_type
     *
     * @return $this
     */
    public function setTestType($test_type)
    {
        $this->container['test_type'] = $test_type;

        return $this;
    }

    /**
     * Gets license_class
     *
     * @return float
     */
    public function getLicenseClass()
    {
        return $this->container['license_class'];
    }

    /**
     * Sets license_class
     *
     * @param float $license_class license_class
     *
     * @return $this
     */
    public function setLicenseClass($license_class)
    {
        $this->container['license_class'] = $license_class;

        return $this;
    }

    /**
     * Gets test_venue
     *
     * @return string
     */
    public function getTestVenue()
    {
        return $this->container['test_venue'];
    }

    /**
     * Sets test_venue
     *
     * @param string $test_venue test_venue
     *
     * @return $this
     */
    public function setTestVenue($test_venue)
    {
        $this->container['test_venue'] = $test_venue;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


